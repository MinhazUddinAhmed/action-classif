#include "annotXML.h"
#include "utils.h"

//------------------------------------------------------------------------------
bool parserXML::is_blank(char c)
{
  return c==' ' ||
         c=='\n' ||
         c=='\r' ||
         c=='\t';
}
//------------------------------------------------------------------------------
void parserXML::read_next()
{
  if(file.eof())
    throw "XML error 2";
  file >> noskipws >> current;
}
//------------------------------------------------------------------------------
int parserXML::parse_blank()
{
  int i = 0;
  while(!file.eof() && is_blank(current))
  {
    i++;
    read_next();
  }
  return i;
}
//------------------------------------------------------------------------------
string parserXML::parse_text_until(char c)
{
  bool begin = true;
  bool last_was_blank = false;
  string s;
  while(true)
  {
    if(current == c) break;
    if(is_blank(current))
    {
      read_next();
      parse_blank();
      last_was_blank = true;
    }
    else
    {
      if(!begin && last_was_blank)
        s+=' ';
      begin = false;
      last_was_blank = false;
      s+=current;
      read_next();
    }
  }
  return s;
}
//------------------------------------------------------------------------------
void parserXML::parse_tag(infoNode* n)
{
  string name = parse_text_until('>');
  name = StrToLower(name);
  read_next();
  infoNode* me = n->add_child(name);
  
  while(true)
  {
    parse_blank();
    if(current == '<')
    {
      read_next();
      if(current == '/')
      {
        read_next();
        string name2 = parse_text_until('>');
        name2 = StrToLower(name2);
        read_next();        
        if(name != name2)
          throw "XML error 3";
        break;
      }
      else
        parse_tag(me);
    }
    else
      me->set_str_value(parse_text_until('<'));
  }
}
//------------------------------------------------------------------------------
document parserXML::load_from_file(const string &filename)
{
  infoNode* root = new infoNode(filename);
  file.open(filename.c_str());
  read_next();
  parse_blank();
  while(!file.eof())
  {
    if(current != '<')
      throw "XML error 1";
    read_next();
    parse_tag(root);
    parse_blank();
  }
  file.close();  
  return root;  
}
//------------------------------------------------------------------------------



//------------------------------------------------------------------------------
void writerXML::write_node(int ntab, infoNode* node)
{
  if(node->has_value)
    file << node->get_str_value().c_str();
  else
    for(unsigned int i=0;i<node->orderedNodes.size(); i++)
    {
      for(int j=0;j<ntab;j++)
        file << "\t";
      file << "<" << node->orderedNodes[i].first.c_str() << ">";
      if(!node->orderedNodes[i].second->has_value)
        file << "\n";
      write_node(ntab+1, node->orderedNodes[i].second);
      if(!node->orderedNodes[i].second->has_value)
        for(int j=0;j<ntab;j++)
          file << "\t";
      file << "</" << node->orderedNodes[i].first.c_str() << ">\n";
  }
}
//------------------------------------------------------------------------------
void writerXML::save_to_file(document doc, const string &filename)
{
  file.open(filename.c_str());
  for(unsigned int i=0;i<doc->orderedNodes.size(); i++)
  {
    file << "<" << doc->orderedNodes[i].first.c_str() << ">";
    if(!doc->orderedNodes[i].second->has_value)
      file << "\n";
    write_node(1,doc->orderedNodes[i].second);
    file << "</" << doc->orderedNodes[i].first.c_str() << ">\n";
  }
  file.close();
}
//------------------------------------------------------------------------------
