//---------------------------------------------------------------------------

#include <vcl.h>
#include <fstream>
#include <vcl\Clipbrd.hpp>
#pragma hdrstop

#include "Mainform.h"
#include "params.h"
#include "actionform.h"
#include "selecttype.h"
//---------------------------------------------------------------------------
#pragma package(smart_init)
#pragma resource "*.dfm"

TMain *Main;
//---------------------------------------------------------------------------
__fastcall TMain::TMain(TComponent* Owner)
  : TForm(Owner)
{
}
//---------------------------------------------------------------------------
void __fastcall TMain::FormCreate(TObject *Sender)
{
  clSelec = clRed;
  clNoSelec = clAqua;
  clHLObj = clYellow;
  Height = 266;
  Width = 347;
  jpg = new TJPEGImage;
  bmp_streched = new Graphics::TBitmap;
  bmp_original = new Graphics::TBitmap;  
  FileOpen = false;
  LoadParam();
  ShowAction();
}
//---------------------------------------------------------------------------
void __fastcall TMain::Exit1Click(TObject *Sender)
{
  Close(); 
}
//---------------------------------------------------------------------------
void __fastcall TMain::Parameters1Click(TObject *Sender)
{
  Parameters->ShowModal();
}
//---------------------------------------------------------------------------
void __fastcall TMain::File1Click(TObject *Sender)
{
  if(FileOpen)
  {
    MainMenu1->Items->Items[0]->Items[1]->Enabled = true;
    MainMenu1->Items->Items[0]->Items[3]->Enabled = true;
    MainMenu1->Items->Items[0]->Items[4]->Enabled = FileOfDB;
  }
  else
  {
    MainMenu1->Items->Items[0]->Items[1]->Enabled = false;
    MainMenu1->Items->Items[0]->Items[3]->Enabled = false;
    MainMenu1->Items->Items[0]->Items[4]->Enabled = false;
  }
}
//---------------------------------------------------------------------------
void TMain::LoadParam()
{
  string dir = GetDirName(Application->ExeName.c_str());
  dir += "\\params.dat";

  int nact;
  FILE *file=fopen(dir.c_str(),"rb");
  if(!file || feof(file))
  {
    next_img = 1;
    ImageFolder = "";
    AnnotFolder = "";
    ActionName.resize(0);
    SaveParam();
  }
  else
  {
    int len,n;
    char *txt;

    fread(&next_img,sizeof(int),1,file);

    fread(&len,sizeof(int),1,file);
    txt = new char[len];
    fread(txt,len,1,file);
    ImageFolder = txt;
    delete[] txt;

    fread(&len,sizeof(int),1,file);
    txt = new char[len];
    fread(txt,len,1,file);
    AnnotFolder = txt;
    delete[] txt;

    fread(&n,sizeof(int),1,file);
    ActionName.resize(n);
    for(int i=0;i<n;i++)
    {
      fread(&len,sizeof(int),1,file);
      txt = new char[len];
      fread(txt,len,1,file);
      ActionName[i] = txt;
      delete[] txt;
    }
    fclose(file);
  }
}
//---------------------------------------------------------------------------
void TMain::SaveParam()
{
  string dir = GetDirName(Application->ExeName.c_str());
  dir += "\\params.dat";

  FILE *file=fopen(dir.c_str(),"wb+");

  int len;
  fwrite(&next_img,sizeof(int),1,file);

  len = ImageFolder.length()+1;
  fwrite(&len,sizeof(int),1,file);
  fwrite(ImageFolder.c_str(),len,1,file);
  len = AnnotFolder.length()+1;
  fwrite(&len,sizeof(int),1,file);
  fwrite(AnnotFolder.c_str(),len,1,file);
  len = ActionName.size();
  fwrite(&len,sizeof(int),1,file);
  for(unsigned int i=0;i<ActionName.size();i++)
  {
    len = ActionName[i].length()+1;
    fwrite(&len,sizeof(int),1,file);
    fwrite(ActionName[i].c_str(),len,1,file);
  }
  fclose(file);
}
//---------------------------------------------------------------------------
void __fastcall TMain::FormShow(TObject *Sender)
{
  if(ImageFolder == "" || AnnotFolder == "")
  {
    Application->MessageBox("You must indicate some parameters before to begin.\n", "Setting parameters", MB_OK);
    Parameters->ShowModal();
  }
  if(ImageFolder == "" || AnnotFolder == "")
    Application->Terminate();
}
//---------------------------------------------------------------------------
void __fastcall TMain::Actions1Click(TObject *Sender)
{
  Actions->ShowModal();
  ShowAction();
}
//---------------------------------------------------------------------------
void __fastcall TMain::Open1Click(TObject *Sender)
{
  OpenDialog1->InitialDir = ImageFolder.c_str();
  if(OpenDialog1->Execute())
  {
    nfile = 0;
    LoadIMG(OpenDialog1->FileName);
  }
}
//---------------------------------------------------------------------------
void __fastcall TMain::Close1Click(TObject *Sender)
{
  CloseIMG();
  nfile++;
  if(nfile<OpenDialog1->Files->Count)
    LoadIMG(OpenDialog1->Files->Strings[nfile]);
}
//---------------------------------------------------------------------------
void __fastcall TMain::Save2Click(TObject *Sender)
{
  SaveIMG();
}
//---------------------------------------------------------------------------
void __fastcall TMain::Removefromdatabase1Click(TObject *Sender)
{
  RemoveIMG();
}
//---------------------------------------------------------------------------
void TMain::LoadIMG(AnsiString FileName)
{
  CloseIMG();
  jpg->LoadFromFile(FileName);
  int w = jpg->Width;
  int h = jpg->Height;
  bool strech = false;
  if(w>MAX_SIZE)
  {
    h = h*MAX_SIZE/w;
    w = MAX_SIZE;
    strech = true;
  }
  if(h>MAX_SIZE)
  {
    w = w*MAX_SIZE/h;
    h = MAX_SIZE;
    strech = true;
  }
  Image1->Stretch = strech;
  Image1->Picture->Graphic = jpg;  
  ResizeAndStrech(w, h);

  LoadXML(FileName);
  LoadObjects();
  ShowInfo();
  DrawObjects();
  ShowObjectsInfo();
  ShowActionInfo();

  Button1->Caption = "CROP";
  Panel1->Visible = true;
  FileModified = false;
  IMGCroped = false;
  MainMenu1->Items->Items[1]->Enabled = false;
  MainMenu1->Items->Items[2]->Enabled = false;
  resizing = false;
  croping = false;
  resize_mode = -1;
  new_obj = 0;
  FileOpen = true;
}
//---------------------------------------------------------------------------
void TMain::SaveIMG()
{
  if(IMGCroped || !FileOfDB)
  {
    TJPEGImage *save_jpg = new TJPEGImage;
    save_jpg->CompressionQuality = 100;
    save_jpg->Assign(bmp_streched);
    AnsiString path = (ImageFolder + "\\").c_str();
    path = path + DBFile + ".jpg";
    save_jpg->SaveToFile(path);
    delete save_jpg;
    IMGCroped = false;
  }

  for(unsigned int i=0;i<objects.size(); i++)
    objects[i].update_rect();

  AnsiString path = (AnnotFolder + "\\").c_str();
  path = path + DBFile + ".xml";
  infoNode *node = *doc->get_child("annotation")->get_child("size");
  node->get_child("width")->set_value(IntToStr(bmp_streched->Width).c_str());
  node->get_child("height")->set_value(IntToStr(bmp_streched->Height).c_str());  
  writerXML writer;
  writer.save_to_file(doc, path.c_str());

  if(!FileOfDB)
  {
    next_img++;
    SaveParam();
    FileOfDB = true;
  }
  FileModified = false;
}
//---------------------------------------------------------------------------
void TMain::RemoveIMG()
{
  AnsiString path = (ImageFolder + "\\").c_str();
  path = path + DBFile + ".jpg";
  DeleteFile(path);
  path = (AnnotFolder + "\\").c_str();
  path = path + DBFile + ".xml";
  DeleteFile(path);
  CloseIMG();
}
//---------------------------------------------------------------------------
void TMain::DrawIMG()
{
  if(croping)
  {
    Canvas->Pen->Color = Color;
    Canvas->Pen->Width = 1;
    Canvas->Brush->Color = Color;
    Canvas->Brush->Style = bsSolid;
    Canvas->Rectangle(Image1->Left-PENWIDTH,Image1->Top-PENWIDTH,crop_rect.left,Image1->Top+Image1->Height+PENWIDTH); // left
    Canvas->Rectangle(Image1->Left-PENWIDTH,Image1->Top-PENWIDTH,Image1->Left+Image1->Width+PENWIDTH,crop_rect.top); // top
    Canvas->Rectangle(crop_rect.right,Image1->Top-PENWIDTH,Image1->Left+Image1->Width+PENWIDTH,Image1->Top+Image1->Height+PENWIDTH); // right
    Canvas->Rectangle(Image1->Left-PENWIDTH,crop_rect.bottom,Image1->Left+Image1->Width+PENWIDTH,Image1->Top+Image1->Height+PENWIDTH); // bottom
    Canvas->Pen->Color = clHotLight;
    Canvas->Pen->Width = PENWIDTH;
    Canvas->Brush->Style = bsClear;
    Canvas->Rectangle(crop_rect.left-ceil((double)PENWIDTH/2.),crop_rect.top-ceil((double)PENWIDTH/2.),
                      crop_rect.right+ceil((double)PENWIDTH/2.),crop_rect.bottom+ceil((double)PENWIDTH/2.));
    Canvas->CopyRect(crop_rect,bmp_streched->Canvas,
                     TRect(crop_rect.left-Image1->Left,crop_rect.top-Image1->Top,
                           crop_rect.right-Image1->Left,crop_rect.bottom-Image1->Top));
  }
  else
  {
    Canvas->Pen->Color = Color;
    Canvas->Pen->Width = PENWIDTH;
    Canvas->Brush->Style = bsClear;
    Canvas->Rectangle(Image1->Left-ceil((double)PENWIDTH/2.),Image1->Top-ceil((double)PENWIDTH/2.),Image1->Left+Image1->Width+ceil((double)PENWIDTH/2.),Image1->Top+Image1->Height+ceil((double)PENWIDTH/2.));
    Canvas->CopyRect(TRect(Image1->Left, Image1->Top, Image1->Left+Image1->Width, Image1->Top+Image1->Height),
                     bmp_streched->Canvas,
                     TRect(0,0,Image1->Width,Image1->Height));
    DrawObjects();
  }
}
//---------------------------------------------------------------------------
void TMain::CloseIMG()
{
  if(!FileOpen) return;
  if(FileModified)
    if(Application->MessageBox("Image was modified, do you want to save it?", "Closing image", MB_YESNO)==ID_YES)
      SaveIMG();
      
  FileOpen = false;
  Canvas->Pen->Color = Color;
  Canvas->Brush->Color = Color;
  Canvas->Brush->Style = bsSolid;
  Canvas->Rectangle(0,0,ClientWidth,ClientHeight);
  Panel1->Visible = false;
  Height = 266;
  Width = 347;
  Label17->Visible = true;
  MainMenu1->Items->Items[1]->Enabled = true;
  MainMenu1->Items->Items[2]->Enabled = true;
  delete doc;
}
//---------------------------------------------------------------------------
void TMain::ResizeAndStrech(int w, int h)
{
  ClientWidth = Image1->Left + w + 24 + Panel1->Width + 16;
  ClientHeight = Panel1->Top+Panel1->Height+16;
  if(ClientHeight<Panel1->Top + h + 16)
    ClientHeight = Panel1->Top + h + 16;
  else
    Image1->Top = Panel1->Top + (Panel1->Height-h)/2;
  Panel1->Left = Image1->Left + w + 24;
  Image1->Width = w;
  Image1->Height = h;
  Label17->Visible = false;
  Label17->Update();
  Image1->Visible = true;
  Image1->Update();
  bmp_original->Assign(Image1->Picture->Graphic);
  bmp_streched->Width = w;
  bmp_streched->Height = h;
  bmp_streched->Canvas->CopyRect(TRect(0,0,w,h),Main->Canvas,TRect(Image1->Left,Image1->Top,Image1->Left+w,Image1->Top+h));
  Image1->Visible = false;
}
//---------------------------------------------------------------------------
void TMain::LoadXML(AnsiString FileName)
{
  string dir = GetDirName(FileName.c_str());
  string file = GetFileName(FileName.c_str());
  string annotfile;

  if(FileName.Pos(ImageFolder.c_str()))
  {
    FileOfDB = true;
    DBFile = file.c_str();
    annotfile = ((AnnotFolder + "\\") + file) + ".xml";
    parserXML parser;
    doc = parser.load_from_file(annotfile);
  }
  else
  {
    FileOfDB = false;  
    annotfile = ((dir + "\\") + file) + ".xml";
    char filename[MAX_PATH];
    sprintf(filename,"action%04d",next_img);
    DBFile = filename;
    if(FileExists(annotfile.c_str()))
    {
      parserXML parser;
      doc = parser.load_from_file(annotfile);
      if(!doc->get_child("annotation")->has_child("originalfile"))
        doc->get_child("annotation")->add_child("originalfile",file+".jpg");
      doc->get_child("annotation")->get_child("filename")->set_value((DBFile+".jpg").c_str());
    }
    else
    {
      string origfile = GetFileName(file.c_str());
      unsigned int flickid = 0;
      int i = origfile.find('_');
      if(i != string::npos)
        flickid = (unsigned int)atoi(origfile.substr(0,i).c_str());
      doc = new infoNode;
      infoNode *annotation = doc->add_child("annotation");
      annotation->add_child("folder","VOC2010");
      annotation->add_child("originalfile",origfile+".jpg");
      annotation->add_child("filename",(DBFile+".jpg").c_str());
      infoNode *source = annotation->add_child("source");
      source->add_child("database","MyDatabase");
      source->add_child("annotation","MyAnnotation");
      if(flickid)
      {
        source->add_child("image","flickr");
        source->add_child("flickrid",origfile.substr(0,i));
      }
      else
      {
        source->add_child("image","Unknown");
        source->add_child("flickrid","Unknown");
      }
      infoNode *owner = annotation->add_child("owner");
      owner->add_child("flickrid","Unknown");
      owner->add_child("name","Unknown");
      infoNode *size = annotation->add_child("size");
      string w = IntToStr(jpg->Width).c_str();
      string h = IntToStr(jpg->Height).c_str();
      size->add_child("width",w);
      size->add_child("height",h);
      size->add_child("depth","3");      
      annotation->add_child("segmented","0");
    }
  }
}
//---------------------------------------------------------------------------
void TMain::LoadObjects()
{
  nodeIterator it = doc->get_child("annotation")->get_child("object");
  objects.clear();
  t_enabled.clear();
  CheckListBox2->Items->Clear();
  Button4->Enabled = false;  
  while(!it.eol())
  {
    AddObject(*it);
    ++it;
  }
  if(CheckListBox2->Items->Count == 0) // no type defined
    AddType("person");
  selected = -1;
  highlighted = -1;
}
//---------------------------------------------------------------------------
void TMain::AddObject(infoNode *obj)
{
  string name = obj->get_child("name")->get_str_value();
  name = StrToLower(name);

  if(name != "")
    AddType(name);

  infoNode *box = *obj->get_child("bndbox");
  int xmin = box->get_child("xmin")->get_int_value();
  int xmax = box->get_child("xmax")->get_int_value();
  int ymin = box->get_child("ymin")->get_int_value();
  int ymax = box->get_child("ymax")->get_int_value();
  Object object(Canvas, Image1->Left, Image1->Top, obj, TRect(xmin,ymin,xmax,ymax), name);
  object.set_ratio(jpg->Width,jpg->Height,Image1->Width,Image1->Height);
  if(name != "") object.hide = !t_enabled[name];
  objects.push_back(object);
}
//---------------------------------------------------------------------------
void TMain::RemoveObject(int i)
{
  doc->get_child("annotation")->remove_child(objects[i].node);
  objects.erase(objects.begin()+i);
  selected = -1;
  highlighted = -1;
  ShowObjectsInfo();
  ShowActionInfo();
  DrawIMG();
}
//---------------------------------------------------------------------------
void TMain::DrawObjects()
{
  for(unsigned int i=0;i<objects.size();i++)
    objects[i].draw(selected==(signed)i?clSelec:(highlighted==(signed)i?clHLObj:clNoSelec));
}
//---------------------------------------------------------------------------
void TMain::HighLightObject(int i)
{
  if(highlighted!=-1 && i!=highlighted && highlighted!=selected)
    objects[highlighted].draw(clNoSelec);
  highlighted = i;
  if(highlighted!=-1 && highlighted!=selected)
    objects[highlighted].draw(clHLObj);
  if(selected!=-1)
    objects[selected].draw(clSelec);
}
//---------------------------------------------------------------------------
void TMain::SelectObject(int i)
{
  if(selected!=-1 && i!=selected)
    objects[selected].draw(clNoSelec);
  selected = i;
  highlighted = -1;
  if(selected != -1)
    objects[selected].draw(clSelec);
  ShowObjectsInfo();
  ShowActionInfo();
}
//---------------------------------------------------------------------------
void TMain::ShowObjectsInfo()
{
  bool fm = FileModified;
  if(selected == -1)
  {
    GroupBox2->Enabled = false;
    Label19->Caption = "No selection";
    CheckBox1->Checked = false;
    CheckBox2->Checked = false;
    ComboBox1->ItemIndex = 0;
    UpDown1->Position = 0;
  }
  else
  {
    GroupBox2->Enabled = true;
    Label19->Caption = objects[selected].node->get_child("name")->get_str_value().c_str();
    if(objects[selected].node->has_child("truncated"))
      CheckBox1->Checked = (objects[selected].node->get_child("truncated")->get_str_value()!="0");
    else
      CheckBox1->Checked = false;
    if(objects[selected].node->has_child("occluded"))
      CheckBox2->Checked = (objects[selected].node->get_child("occluded")->get_str_value()!="0");
    else
      CheckBox2->Checked = false;
    if(objects[selected].node->has_child("pose"))
    {
      string p = objects[selected].node->get_child("pose")->get_str_value();
      p = StrToLower(p);
      if(p == "frontal")
        ComboBox1->ItemIndex = 1;
      else if(p == "rear")
        ComboBox1->ItemIndex = 2;
      else if(p == "left")
        ComboBox1->ItemIndex = 3;
      else if(p == "right")
        ComboBox1->ItemIndex = 4;
      else
        ComboBox1->ItemIndex = 0;
    }
    else
      ComboBox1->ItemIndex = 0;
    if(objects[selected].node->has_child("difficult"))
      UpDown1->Position = objects[selected].node->get_child("difficult")->get_int_value();
    else
      UpDown1->Position = 0;
  }
  Label18->Enabled = GroupBox2->Enabled;
  Label19->Enabled = GroupBox2->Enabled;
  Label8->Enabled = GroupBox2->Enabled;
  Label20->Enabled = GroupBox2->Enabled;
  CheckBox1->Enabled = GroupBox2->Enabled;
  CheckBox2->Enabled = GroupBox2->Enabled;
  ComboBox1->Enabled = GroupBox2->Enabled;
  Edit1->Enabled = GroupBox2->Enabled;
  Button2->Enabled = GroupBox2->Enabled;  
  UpDown1->Enabled = GroupBox2->Enabled;
  FileModified = fm;  
}
//---------------------------------------------------------------------------
void TMain::ShowActionInfo()
{
  string name;
  bool fm = FileModified;
  if(selected != -1)
  {
    name = objects[selected].node->get_child("name")->get_str_value();
    name = StrToLower(name);
  }
  if(selected == -1 || name != "person")
  {
    GroupBox3->Enabled = false;
    for(int i=0;i<CheckListBox1->Items->Count;i++)
      CheckListBox1->Checked[i] = false;
    CheckBox3->Checked = false;  
  }
  else
  {
    GroupBox3->Enabled = true;
    map<string, bool> act;
    nodeIterator it = objects[selected].node->get_child("action");
    while(!it.eol())
    {
      string action = it->get_child("actionname")->get_str_value();
      action = StrToLower(action);
      if(it->has_child("ambiguous"))
        act[action] = it->get_child("ambiguous")->get_int_value();
      else
        act[action] = false;
      ++it;
    }
    int index = -1;
    bool check = false;
    for(int i=0;i<CheckListBox1->Items->Count;i++)
    {
      string s = CheckListBox1->Items->Strings[i].c_str();
      s = StrToLower(s);
      CheckListBox1->Checked[i] = (act.find(s) != act.end());
      if(CheckListBox1->Checked[i] && index == -1)
      {
        index = i;
        check = ((act.find(s) != act.end()) && act[s]);
      }
    }
    CheckListBox1->ItemIndex = index;
    CheckBox3->Checked = check;    
    CheckBox3->Enabled = CheckListBox1->Items->Count>0 && index != -1 && CheckListBox1->Checked[index];
  }
  CheckListBox1->Enabled = GroupBox3->Enabled;
  FileModified = fm;  
}
//---------------------------------------------------------------------------
void TMain::ShowInfo()
{
  infoNode *annot = *doc->get_child("annotation");
  Label10->Caption = annot->get_child("originalfile")->get_str_value().c_str();
  Label12->Caption = annot->get_child("filename")->get_str_value().c_str();
  infoNode *source = *annot->get_child("source");
  Label13->Caption = source->get_child("database")->get_str_value().c_str();
  Label14->Caption = source->get_child("annotation")->get_str_value().c_str();
  Label15->Caption = source->get_child("image")->get_str_value().c_str();
  Label16->Caption = source->get_child("flickrid")->get_str_value().c_str();
  ShowSize(jpg->Width, jpg->Height);
}
//---------------------------------------------------------------------------
void TMain::ShowAction()
{
  CheckListBox1->Items->Clear();
  for(unsigned int i=0;i<ActionName.size(); i++)
    CheckListBox1->Items->Add(ActionName[i].c_str());
}
//---------------------------------------------------------------------------
void TMain::ShowSize(int w, int h)
{
  Label11->Caption = IntToStr(w)+"x"+IntToStr(h);
  Label11->Font->Color = (w>500 || h>500)?clRed:clBlack;
}
//---------------------------------------------------------------------------
void __fastcall TMain::FormPaint(TObject *Sender)
{
  if(FileOpen)
    DrawIMG();
}
//---------------------------------------------------------------------------
void __fastcall TMain::FormMouseMove(TObject *Sender, TShiftState Shift,
      int X, int Y)
{
  if(!FileOpen) return;
  if(croping)
  {
    if(crop_drag)
    {
      if(X<Image1->Left) X = Image1->Left;
      if(Y<Image1->Top)  Y = Image1->Top;
      if(X>Image1->Left+Image1->Width) X = Image1->Left+Image1->Width;
      if(Y>Image1->Top+Image1->Height) Y = Image1->Top+Image1->Height;
      switch(resize_mode)
      {
        case 0: crop_rect.top = Y; break;
        case 1: crop_rect.top = Y;
                crop_rect.right = X; break;
        case 2: crop_rect.right = X; break;
        case 3: crop_rect.bottom = Y;
                crop_rect.right = X; break;
        case 4: crop_rect.bottom = Y; break;
        case 5: crop_rect.bottom = Y;
                crop_rect.left = X; break;
        case 6: crop_rect.left = X; break;
        case 7: crop_rect.top = Y;
                crop_rect.left = X; break;
      }
      if(crop_rect.top>crop_rect.bottom)
      {
        int t = crop_rect.bottom;
        crop_rect.bottom = crop_rect.top;
        crop_rect.top = t;
        if(resize_mode>4) resize_mode = 12-resize_mode;
                     else resize_mode = 4-resize_mode;
      }
      if(crop_rect.left>crop_rect.right)
      {
        int t = crop_rect.right;
        crop_rect.right = crop_rect.left;
        crop_rect.left = t;
        resize_mode = (8-resize_mode)%8;
      }
      int w = crop_rect.right-crop_rect.left;
      int h = crop_rect.bottom-crop_rect.top;
      ShowSize(w*jpg->Width/Image1->Width,h*jpg->Height/Image1->Height);
      DrawIMG();
    }
    else
    {
      int cx = (crop_rect.left+crop_rect.right)/2;
      int cy = (crop_rect.top+crop_rect.bottom)/2;
      bool left   = abs(X-crop_rect.left)<MARGIN && X<cx && crop_rect.top-MARGIN<Y && Y<crop_rect.bottom+MARGIN;
      bool right  = abs(X-crop_rect.right)<MARGIN && X>=cx && crop_rect.top-MARGIN<Y && Y<crop_rect.bottom+MARGIN;
      bool top    = abs(Y-crop_rect.top)<MARGIN && Y<cy && crop_rect.left-MARGIN<X && X<crop_rect.right+MARGIN;
      bool bottom = abs(Y-crop_rect.bottom)<MARGIN && Y>=cy && crop_rect.left-MARGIN<X && X<crop_rect.right+MARGIN;
      resize_mode = GetResizeMode(left, right, top, bottom);
    }
  } else if(resizing)
  {
    if(X<Image1->Left) X = Image1->Left;
    if(Y<Image1->Top)  Y = Image1->Top;
    if(X>Image1->Left+Image1->Width-1) X = Image1->Left+Image1->Width-1;
    if(Y>Image1->Top+Image1->Height-1) Y = Image1->Top+Image1->Height-1;
    switch(resize_mode)
    {
      case 0: objects[selected].coord.top = Y; break;
      case 1: objects[selected].coord.top = Y;
              objects[selected].coord.right = X; break;
      case 2: objects[selected].coord.right = X; break;
      case 3: objects[selected].coord.bottom = Y;
              objects[selected].coord.right = X; break;
      case 4: objects[selected].coord.bottom = Y; break;
      case 5: objects[selected].coord.bottom = Y;
              objects[selected].coord.left = X; break;
      case 6: objects[selected].coord.left = X; break;
      case 7: objects[selected].coord.top = Y;
              objects[selected].coord.left = X; break;
    }
    if(objects[selected].coord.top>objects[selected].coord.bottom)
    {
      int t = objects[selected].coord.bottom;
      objects[selected].coord.bottom = objects[selected].coord.top;
      objects[selected].coord.top = t;
      if(resize_mode>4) resize_mode = 12-resize_mode;
              else resize_mode = 4-resize_mode;
    }
    if(objects[selected].coord.left>objects[selected].coord.right)
    {
      int t = objects[selected].coord.right;
      objects[selected].coord.right = objects[selected].coord.left;
      objects[selected].coord.left = t;
      resize_mode = (8-resize_mode)%8;
    }
    DrawIMG();
  }
  else if(new_obj == 1)
  {
    if(sqrt(pow(X-new_obj_X,2.)+pow(Y-new_obj_Y,2.))>2*MARGIN)
    {
      if(CheckListBox2->Items->Count==0)
      {
        Application->MessageBox("You must define at least one object name to annotate a new object.","No object type defined", MB_OK);
        new_obj = 0;
        return;
      }
      new_obj = 2;
      infoNode *obj = doc->get_child("annotation")->add_child("object");
      obj->add_child("name","");
      obj->add_child("pose","Unspecified");
      obj->add_child("truncated","0");
      obj->add_child("occluded","0");
      obj->add_child("difficult","0");
      infoNode *box = obj->add_child("bndbox");
      int xmin = new_obj_X;
      int ymin = new_obj_Y;
      int xmax = X;
      int ymax = Y;
      resize_mode = 3;
      if(ymin>ymax)
      {
        int t = ymin;
        ymin = ymax;
        ymax = t;
        resize_mode = 1;
      }
      if(xmin>xmax)
      {
        int t = xmin;
        xmin = xmax;
        xmax = t;
        resize_mode = 8-resize_mode;
      }
      xmin = (xmin-Image1->Left)*jpg->Width/Image1->Width;
      xmax = (xmax-Image1->Left)*jpg->Width/Image1->Width;
      ymin = (ymin-Image1->Top)*jpg->Height/Image1->Height;
      ymax = (ymax-Image1->Top)*jpg->Height/Image1->Height;
      box->add_child("xmin",IntToStr(xmin).c_str());
      box->add_child("ymin",IntToStr(ymin).c_str());
      box->add_child("xmax",IntToStr(xmax).c_str());
      box->add_child("ymax",IntToStr(ymax).c_str());
      AddObject(obj);
      SelectObject(objects.size()-1);
      resizing = true;
    }
  }
  else
  {
    double min_dist = -1.;
    int h = -1;
    for(unsigned int i=0;i<objects.size(); i++)
    {
      if(objects[i].hide) continue;
      double d = objects[i].get_dist(X,Y);
      if((signed)i!=selected)
      {
        if(d != -1. && (min_dist==-1. || d<min_dist))
        {
          min_dist = d;
          h = i;
        }
      }
      else
      {
        bool left,right,top,bottom;
        objects[i].get_edge(X,Y,left,right,top,bottom);
        resize_mode = GetResizeMode(left, right, top, bottom);
      }
    }
    HighLightObject(h);
  }
}
//---------------------------------------------------------------------------
int TMain::GetResizeMode(bool left, bool right, bool top, bool bottom)
{
  int rmode;
  if(left)
  {
    if(top) {Cursor = crSizeNWSE; rmode = 7;}
    else if(bottom) {Cursor = crSizeNESW; rmode = 5;}
    else {Cursor = crSizeWE; rmode = 6;}
  }
  else if(right)
  {
    if(top) {Cursor = crSizeNESW; rmode = 1;}
    else if(bottom) {Cursor = crSizeNWSE; rmode = 3;}
    else {Cursor = crSizeWE; rmode = 2;}
  }
  else if(top || bottom) {Cursor = crSizeNS; rmode = (top?0:4);}
  else {Cursor = crDefault; rmode = -1;}
  return rmode;
}
//---------------------------------------------------------------------------
void __fastcall TMain::FormMouseDown(TObject *Sender, TMouseButton Button,
      TShiftState Shift, int X, int Y)
{
  if(!FileOpen) return;
  if(Button == mbRight)
    SelectObject(highlighted);
  else if(Button == mbLeft)
  {
    if(croping)
    {
      if(resize_mode != -1)
        crop_drag = true;
    }
    else if(resize_mode != -1)
      resizing = true;
    else if(X>=Image1->Left && Y>=Image1->Top &&
            X<=Image1->Left+Image1->Width && Y<=Image1->Top+Image1->Height)
    {
      new_obj = 1;
      new_obj_X = X;
      new_obj_Y = Y;
    }
  }
}
//---------------------------------------------------------------------------
void __fastcall TMain::FormMouseUp(TObject *Sender, TMouseButton Button,
      TShiftState Shift, int X, int Y)
{
  if(!FileOpen || Button != mbLeft) return;
  if(new_obj == 2)
  {
    if(CheckListBox2->Items->Count>1)
      TypeSelect->ShowModal();
    if(CheckListBox2->Items->Count==1 || TypeSelect->ModalResult==mrOk)
    {
      string s;
      if(CheckListBox2->Items->Count==1)
        s = CheckListBox2->Items->Strings[0].c_str();
      else
        s = TypeSelect->ComboBox1->Items->Strings[TypeSelect->ComboBox1->ItemIndex].c_str();
      s = StrToLower(s);
      AddType(s);
      ShowHideType(s);
      objects[objects.size()-1].type = s;
      objects[objects.size()-1].node->get_child("name")->set_value(s);
      ShowObjectsInfo();
      ShowActionInfo();
    }
    else
      RemoveObject(objects.size()-1);
  }
  Cursor = crDefault;
  resizing = false;
  resize_mode = -1;
  crop_drag = false;
  new_obj = 0;
}
//---------------------------------------------------------------------------
void __fastcall TMain::CheckListBox2ClickCheck(TObject *Sender)
{
  string s = CheckListBox2->Items->Strings[CheckListBox2->ItemIndex].c_str();
  ShowHideType(s);
}
//---------------------------------------------------------------------------
void TMain::AddType(string type)
{
  if(t_enabled.find(type) == t_enabled.end())
  {
    t_enabled[type] = true;
    CheckListBox2->Items->Add(type.c_str());
    CheckListBox2->Checked[CheckListBox2->Items->Count-1] = t_enabled[type];
    CheckListBox2->ItemIndex = CheckListBox2->Items->Count-1;
    Button4->Enabled = true;
  }
  else
  {
    for(int i=0;i<CheckListBox2->Items->Count;i++)
    {
      string s = CheckListBox2->Items->Strings[i].c_str();
      s = StrToLower(s);
      if(s == type)
        CheckListBox2->Checked[i] = true;
    }
    t_enabled[type] = true;
  }
}
//---------------------------------------------------------------------------
void TMain::DeleteType(string type)
{
  type = StrToLower(type);
  infoNode *node = *doc->get_child("annotation");
  t_enabled.erase(type);
  for(unsigned int i=0;i<objects.size();i++)
    if(objects[i].type == type)
    {
      node->remove_child(objects[i].node);
      objects.erase(objects.begin()+i);
      i--;
    }

  CheckListBox2->Items->Delete(CheckListBox2->ItemIndex);
  CheckListBox2->ItemIndex = CheckListBox2->Items->Count-1;
  if(CheckListBox2->ItemIndex == -1)
    Button4->Enabled = false;
  selected = -1;
  highlighted = -1;
  ShowObjectsInfo();
  ShowActionInfo();
  DrawIMG();
}
//---------------------------------------------------------------------------
void TMain::ShowHideType(string type)
{
  t_enabled[type] = CheckListBox2->Checked[CheckListBox2->ItemIndex];
  for(unsigned int i=0; i<objects.size(); i++)
    if(objects[i].type == type)
      objects[i].hide = !CheckListBox2->Checked[CheckListBox2->ItemIndex];
  DrawIMG();
}
//---------------------------------------------------------------------------
void __fastcall TMain::Button3Click(TObject *Sender)
{
  AnsiString Value;
  if(InputQuery("New object name","Please enter the new object name:",Value))
  {
    string s = Value.c_str();
    s = StrToLower(s);
    AddType(s);
  }
}
//---------------------------------------------------------------------------
void __fastcall TMain::Button4Click(TObject *Sender)
{
  string s = CheckListBox2->Items->Strings[CheckListBox2->ItemIndex].c_str();
  AnsiString Prompt = "Are you sure you want to delete all '";
  Prompt = (Prompt + s.c_str()) + "'?";
  if(Application->MessageBox(Prompt.c_str(),"Deleting an object type", MB_ICONEXCLAMATION|MB_YESNO)==ID_YES)
  {
    FileModified = true;  
    DeleteType(s);
  }
}
//---------------------------------------------------------------------------
void __fastcall TMain::Button2Click(TObject *Sender)
{
  FileModified = true;
  RemoveObject(selected);
}
//---------------------------------------------------------------------------
void __fastcall TMain::CheckBox1Click(TObject *Sender)
{
  if(!FileOpen || selected == -1) return;
  FileModified = true;
  if(objects[selected].node->has_child("truncated"))
    objects[selected].node->get_child("truncated")->set_value(CheckBox1->Checked?"1":"0");
  else
    objects[selected].node->add_child("truncated",CheckBox1->Checked?"1":"0");
}
//---------------------------------------------------------------------------
void __fastcall TMain::CheckBox2Click(TObject *Sender)
{
  if(!FileOpen || selected == -1) return;
  FileModified = true;
  if(objects[selected].node->has_child("occluded"))
    objects[selected].node->get_child("occluded")->set_value(CheckBox2->Checked?"1":"0");
  else
    objects[selected].node->add_child("occluded",CheckBox2->Checked?"1":"0");
}
//---------------------------------------------------------------------------
void __fastcall TMain::UpDown1ChangingEx(TObject *Sender,
      bool &AllowChange, short NewValue, TUpDownDirection Direction)
{
  if(!FileOpen || selected == -1) return;
  FileModified = true;
  AllowChange = true;
  if(objects[selected].node->has_child("difficult"))
    objects[selected].node->get_child("difficult")->set_value(IntToStr(NewValue).c_str());
  else
    objects[selected].node->add_child("difficult",IntToStr(NewValue).c_str());
}
//---------------------------------------------------------------------------
void __fastcall TMain::ComboBox1Change(TObject *Sender)
{
  if(!FileOpen || selected == -1) return;
  FileModified = true;
  string view;
  switch(ComboBox1->ItemIndex)
  {
    case 0: view = "Unspecified"; break;
    case 1: view = "Frontal"; break;
    case 2: view = "Rear"; break;
    case 3: view = "Left"; break;
    case 4: view = "Right"; break;
  }
  if(objects[selected].node->has_child("pose"))
    objects[selected].node->get_child("pose")->set_value(view);
  else
    objects[selected].node->add_child("pose",view);
}
//---------------------------------------------------------------------------
void __fastcall TMain::CheckListBox1Click(TObject *Sender)
{
  if(!FileOpen || selected == -1) return;
  CheckBox3->Enabled = CheckListBox1->Checked[CheckListBox1->ItemIndex];
  if(CheckBox3->Enabled)
  {
    string s = CheckListBox1->Items->Strings[CheckListBox1->ItemIndex].c_str();
    infoNode *n = objects[selected].node->get_child_st("action","actionname",s);
    if(n->has_child("ambiguous"))
      CheckBox3->Checked = n->get_child("ambiguous")->get_int_value();
    else
      CheckBox3->Checked = false;
  }
  else
    CheckBox3->Checked = false;
}
//---------------------------------------------------------------------------
void __fastcall TMain::CheckListBox1ClickCheck(TObject *Sender)
{
  if(!FileOpen || selected == -1) return;
  FileModified = true;
  string s = CheckListBox1->Items->Strings[CheckListBox1->ItemIndex].c_str();
  if(CheckListBox1->Checked[CheckListBox1->ItemIndex])
  {
    infoNode *act = objects[selected].node->add_child("action");
    act->add_child("actionname",s);
    act->add_child("ambiguous","0");
    CheckBox3->Enabled = true;
    CheckBox3->Checked = false;
  }
  else
  {
    infoNode *n = objects[selected].node->get_child_st("action","actionname",s);
    objects[selected].node->remove_child(n);
    CheckBox3->Checked = false;
    CheckBox3->Enabled = false;
  }  
}
//---------------------------------------------------------------------------
void __fastcall TMain::CheckBox3Click(TObject *Sender)
{
  if(!FileOpen || selected == -1) return;
  if(!CheckListBox1->Checked[CheckListBox1->ItemIndex]) return;
  FileModified = true;  
  string s = CheckListBox1->Items->Strings[CheckListBox1->ItemIndex].c_str();
  infoNode *n = objects[selected].node->get_child_st("action","actionname",s);
  if(n->has_child("ambiguous"))
    n->get_child("ambiguous")->set_value(CheckBox3->Checked?"1":"0");
  else
    n->add_child("ambiguous", CheckBox3->Checked?"1":"0");
}
//---------------------------------------------------------------------------
void __fastcall TMain::Button1Click(TObject *Sender)
{
  if(!croping)
  {
    crop_rect = TRect(Image1->Left,
                      Image1->Top,
                      Image1->Left+Image1->Width,
                      Image1->Top+Image1->Height);
    Button1->Caption = "STOP";
    IMGCroped = true;
    crop_drag =false;
    croping = true;
    DrawIMG();
  }
  else
  {
    Graphics::TBitmap *tmp = new Graphics::TBitmap;
    int w = crop_rect.right-crop_rect.left;
    int h = crop_rect.bottom-crop_rect.top;
    w = w*jpg->Width/Image1->Width;
    h = h*jpg->Height/Image1->Height;
    tmp->Width = w;
    tmp->Height = h;
    crop_rect.left = (crop_rect.left-Image1->Left)*jpg->Width/Image1->Width;
    crop_rect.right = (crop_rect.right-Image1->Left)*jpg->Width/Image1->Width;
    crop_rect.top = (crop_rect.top-Image1->Top)*jpg->Height/Image1->Height;
    crop_rect.bottom = (crop_rect.bottom-Image1->Top)*jpg->Height/Image1->Height;
    tmp->Canvas->CopyRect(TRect(0,0,w,h),bmp_original->Canvas,crop_rect);
    delete bmp_original;
    bmp_original = tmp;
    jpg->Assign(bmp_original);

    bool strech = false;
    if(w>MAX_SIZE)
    {
      h = h*MAX_SIZE/w;
      w = MAX_SIZE;
      strech = true;
    }
    if(h>MAX_SIZE)
    {
      w = w*MAX_SIZE/h;
      h = MAX_SIZE;
      strech = true;
    }
    Image1->Stretch = strech;
    Image1->Picture->Graphic = bmp_original;
    ResizeAndStrech(w, h);

    for(unsigned int i=0;i<objects.size(); i++)
    {
      objects[i].apply_crop(crop_rect.left,crop_rect.top);
      objects[i].set_offset(Image1->Left, Image1->Top);
      objects[i].set_ratio(jpg->Width,jpg->Height,Image1->Width,Image1->Height);
    }
    
    croping = false;
    Button1->Caption = "CROP";
    Canvas->Pen->Color = Color;
    Canvas->Brush->Color = Color;
    Canvas->Brush->Style = bsSolid;
    Canvas->Rectangle(0,0,ClientWidth,ClientHeight);
    DrawIMG();
  }
}
//---------------------------------------------------------------------------
void __fastcall TMain::FormClose(TObject *Sender, TCloseAction &Action)
{
  CloseIMG();
}
//---------------------------------------------------------------------------


